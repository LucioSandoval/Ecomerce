// <auto-generated />
using System;
using Ecomerce.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecomerce.Migrations
{
    [DbContext(typeof(MyContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CustomerOrder", b =>
                {
                    b.Property<int>("Customerscustomer_id")
                        .HasColumnType("int");

                    b.Property<int>("Ordersorder_id")
                        .HasColumnType("int");

                    b.HasKey("Customerscustomer_id", "Ordersorder_id");

                    b.HasIndex("Ordersorder_id");

                    b.ToTable("CustomerOrder");
                });

            modelBuilder.Entity("Ecomerce.Models.Category", b =>
                {
                    b.Property<int>("category_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("category_id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Ecomerce.Models.Customer", b =>
                {
                    b.Property<int>("customer_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("role")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("zip")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("customer_id");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("Ecomerce.Models.CustomersOrders", b =>
                {
                    b.Property<int>("cusord_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Customerscustomer_id")
                        .HasColumnType("int");

                    b.Property<int>("Ordersorder_id")
                        .HasColumnType("int");

                    b.Property<int>("customer_id")
                        .HasColumnType("int");

                    b.Property<int>("order_id")
                        .HasColumnType("int");

                    b.HasKey("cusord_id");

                    b.HasIndex("Customerscustomer_id");

                    b.HasIndex("Ordersorder_id");

                    b.ToTable("customers_has_orders");
                });

            modelBuilder.Entity("Ecomerce.Models.Order", b =>
                {
                    b.Property<int>("order_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("shipping_address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("shipping_city")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("shipping_fees")
                        .HasColumnType("double");

                    b.Property<string>("shipping_state")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("shipping_weight")
                        .HasColumnType("double");

                    b.Property<string>("shipping_zip")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("total")
                        .HasColumnType("double");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("order_id");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("Ecomerce.Models.Product", b =>
                {
                    b.Property<int>("product_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("price")
                        .HasColumnType("double");

                    b.Property<string>("short_desc")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("weight")
                        .HasColumnType("double");

                    b.HasKey("product_id");

                    b.ToTable("products");
                });

            modelBuilder.Entity("Ecomerce.Models.ProductsCategories", b =>
                {
                    b.Property<int>("procat_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Categoriescategory_id")
                        .HasColumnType("int");

                    b.Property<int>("Productsproduct_id")
                        .HasColumnType("int");

                    b.Property<int>("category_id")
                        .HasColumnType("int");

                    b.Property<int>("product_id")
                        .HasColumnType("int");

                    b.HasKey("procat_id");

                    b.HasIndex("Categoriescategory_id");

                    b.HasIndex("Productsproduct_id");

                    b.ToTable("products_has_categories");
                });

            modelBuilder.Entity("Ecomerce.Models.ProductsOrders", b =>
                {
                    b.Property<int>("poord_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Ordersorder_id")
                        .HasColumnType("int");

                    b.Property<int>("Productsproduct_id")
                        .HasColumnType("int");

                    b.Property<int>("order_id")
                        .HasColumnType("int");

                    b.Property<int>("product_id")
                        .HasColumnType("int");

                    b.HasKey("poord_id");

                    b.HasIndex("Ordersorder_id");

                    b.HasIndex("Productsproduct_id");

                    b.ToTable("products_has_orders");
                });

            modelBuilder.Entity("CustomerOrder", b =>
                {
                    b.HasOne("Ecomerce.Models.Customer", null)
                        .WithMany()
                        .HasForeignKey("Customerscustomer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecomerce.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("Ordersorder_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecomerce.Models.CustomersOrders", b =>
                {
                    b.HasOne("Ecomerce.Models.Customer", "Customers")
                        .WithMany()
                        .HasForeignKey("Customerscustomer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecomerce.Models.Order", "Orders")
                        .WithMany()
                        .HasForeignKey("Ordersorder_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customers");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Ecomerce.Models.ProductsCategories", b =>
                {
                    b.HasOne("Ecomerce.Models.Category", "Categories")
                        .WithMany("ProductsCategories")
                        .HasForeignKey("Categoriescategory_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecomerce.Models.Product", "Products")
                        .WithMany("ProductsCategories")
                        .HasForeignKey("Productsproduct_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecomerce.Models.ProductsOrders", b =>
                {
                    b.HasOne("Ecomerce.Models.Order", "Orders")
                        .WithMany()
                        .HasForeignKey("Ordersorder_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecomerce.Models.Product", "Products")
                        .WithMany()
                        .HasForeignKey("Productsproduct_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecomerce.Models.Category", b =>
                {
                    b.Navigation("ProductsCategories");
                });

            modelBuilder.Entity("Ecomerce.Models.Product", b =>
                {
                    b.Navigation("ProductsCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
